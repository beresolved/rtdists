{
    "contents" : "# Rfastdm Wrapper\n\n## REMOVE THESE 3 LINES FOR PRODUCTION\n#system (\"R CMD SHLIB Rfastdm2.c density.c cdf.c pde.c phi.c precision.c\") \n\n\n# For these functions:\n#   t  - a vector of RTs\n#   pl - a list of parameters\n#        order: c(\"a\",\"v\",\"ter\",\"d\",\"sz\",\"sv\",\"st\",\"z\")\n#   i  - the boundary to test, upper = 2, lower = 1\n#   n  - number of samples to produce\ndrd <- function (t, pl, i, precision = 3)\n{\n    # Check for illegal parameter values\n     if (any(is.na(pl)) || !all(is.finite(pl))) return(rep(NA,length=length(t)))\n       \n    # Call the C code\n    densities <- vector(length=length(t))    \n    dyn.load (\"Rfastdm2.so\") # Load library\n    output <- .C(\"dfastdm_b\", \n                 as.integer (length(t)),                 # 1  IN:  number of densities\n                 as.vector  (pl),                        # 2  IN:  parameters\n                 as.vector  (t),                         # 3  IN:  RTs\n                 as.double  (precision),                 # 4  IN:  precision\n                 as.integer (i),                         # 5  IN:  boundart \n                 as.vector  (densities, mode=\"numeric\")  # 6 OUT:  densities\n    )\n    dyn.unload (\"Rfastdm2.so\") # Unload library\n\n   unlist(output[6])\n  \n}\n\n# set maximum t value to stop integration problems\nprd <- function (t, pl, i, precision = 3, maxt = 1e4) \n{\n  # Check for illegal parameter values\n  pvalues <- rep(NA,length=length(t))\n  if (any(is.na(pl)) || !all(is.finite(pl))) return(pvalues)\n  t[t>maxt] <- maxt\n  \n  # Call the C code\n  dyn.load (\"Rfastdm2.so\") # Load library\n  pvalues <- vector(length=length(t))    \n  output <- .C(\"pfastdm_b\", \n               as.integer (length(t)),               # 1  IN:  number of densities\n               as.vector  (pl),                      # 2  IN:  parameters\n               as.vector  (t),                       # 3  IN:  RTs\n               as.double  (precision),               # 4  IN:  number of densities\n               as.integer (i),                       # 5  IN:  boundary \n               as.vector  (pvalues, mode=\"numeric\")  # 6 OUT:  pvalues\n  )\n  dyn.unload (\"Rfastdm2.so\") # Unload library\n  \n  unlist(output[6])\n  \n}\n\n# Returns a matrix of 2 x n (RTs x boundaries)\nrrd <- function (n, pl, precision = 3)\n{\n  randRTs    <- vector(length=n)\n  randBounds <- vector(length=n)\n  \n  dyn.load (\"Rfastdm2.so\") # Load library\n  output <- .C(\"rfastdm\", \n               as.integer (n),                          # 1  IN:  number of densities\n               as.vector  (pl),                         # 2  IN:  parameters\n               as.double  (precision),                  # 3  IN:  precision\n               as.vector  (randRTs, mode=\"numeric\"),    # 4 OUT:  RTs \n               as.vector  (randBounds, mode=\"numeric\")  # 5 OUT:  bounds \n  )\n  dyn.unload (\"Rfastdm2.so\") # Unload library\n  \n  randRTs <- unlist(output[4]) \n  randBounds <- unlist(output[5])\n  \n  # Note: incrementing the bounds for 0,1 to be 1,2\n  matrix (c(randRTs, randBounds+1), ncol=2)\n}",
    "created" : 1407838950823.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "104953300",
    "id" : "A62A108D",
    "lastKnownWriteTime" : 1406233348,
    "path" : "~/Desktop/work/Rfastdm2/FastDM.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}